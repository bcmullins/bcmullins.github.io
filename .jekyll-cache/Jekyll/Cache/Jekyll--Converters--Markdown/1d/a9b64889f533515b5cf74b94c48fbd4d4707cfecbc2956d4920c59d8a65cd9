I"÷5<p>JSON is the typical format used by web services for message passing thatâ€™s also relatively human-readable. Despite being more human-readable than most alternatives, JSON objects can be quite complex. For analyzing complex JSON data in Python, there arenâ€™t clear, general methods for extracting information (see <a href="https://realpython.com/python-json/">here</a> for a tutorial of working with JSON data in Python). This post provides a solution if one knows the path through the nested JSON to the desired information.</p>

<h2 id="motivating-example">Motivating Example</h2>
<p>Suppose you have the following JSON record:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="nl">"employees"</span><span class="p">:</span><span class="w">
    </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Alice"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"dev"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"nbr"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Bob"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"dev"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"nbr"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
  </span><span class="nl">"firm"</span><span class="p">:</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Charlie's Waffle Emporium"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CA"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>This record has two keys at the top level: <em>employees</em> and <em>firm</em>. The value for the <em>employees</em> key is a list of two objects of the same schema; each object has the keys <em>name</em>, <em>role</em>, and <em>nbr</em>. The value for the <em>firm</em> key is an object with the keys <em>name</em> and <em>location</em>.</p>

<p>Suppose you want to extract the names of the employees. This record will give problems for approaches that just search through key names, since the name of the firm will be returned as well.</p>

<h2 id="solution">Solution</h2>
<p>Calling the <em>extract_element_from_json</em> function on the above record delivers the desired result:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">"employees"</span><span class="p">:[{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Alice"</span><span class="p">,</span> <span class="s">"role"</span><span class="p">:</span> <span class="s">"dev"</span><span class="p">,</span> <span class="s">"nbr"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Bob"</span><span class="p">,</span> <span class="s">"role"</span><span class="p">:</span> <span class="s">"dev"</span><span class="p">,</span> <span class="s">"nbr"</span><span class="p">:</span> <span class="mi">2</span><span class="p">}],</span> <span class="s">"firm"</span><span class="p">:{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Charlie's Waffle Emporium"</span><span class="p">,</span> <span class="s">"location"</span><span class="p">:</span> <span class="s">"CA"</span><span class="p">}}</span>

<span class="n">extract_element_from_json</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="p">[</span><span class="s">"employees"</span><span class="p">,</span> <span class="s">"name"</span><span class="p">])</span>
<span class="o">&gt;&gt;</span> <span class="p">[</span><span class="s">'Alice'</span><span class="p">,</span> <span class="s">'Bob'</span><span class="p">]</span></code></pre></figure>

<h2 id="under-the-hood">Under the Hood</h2>
<p>This function nests into the record(s) in <em>obj</em> according to the keys specified in <em>path</em> to retrieve the desired information. When a list is encountered as the value of a key in <em>path</em>, this function splits and continues nesting on each element of the encountered list in a depth-first manner. This is how both â€˜Aliceâ€™ and â€˜Bobâ€™ are returned; since the value of <em>employees</em> is a list, the nesting is split on both of its elements and each of the values for <em>name</em> are appended to the output list.</p>

<p>If <em>obj</em> is a single dictionary/JSON record, then this function returns a list containing the desired information, and if <em>obj</em> is a list of dictionaries/JSON records, then this function returns a list of lists containing the desired information.</p>

<p>If any element of <em>path</em> is missing from the corresponding level of the nested dictionary/JSON, then this function returns a <em>None</em> .</p>

<p>Below is the full function (inspired/motivated from whatâ€™s discussed <a href="https://hackersandslackers.com/extract-data-from-complex-json-python/">here</a>):</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">extract_element_from_json</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
    <span class="s">'''
    Extracts an element from a nested dictionary or
    a list of nested dictionaries along a specified path.
    If the input is a dictionary, a list is returned.
    If the input is a list of dictionary, a list of lists is returned.
    obj - list or dict - input dictionary or list of dictionaries
    path - list - list of strings that form the path to the desired element
    '''</span>
    <span class="k">def</span> <span class="nf">extract</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">ind</span><span class="p">,</span> <span class="n">arr</span><span class="p">):</span>
        <span class="s">'''
            Extracts an element from a nested dictionary
            along a specified path and returns a list.
            obj - dict - input dictionary
            path - list - list of strings that form the JSON path
            ind - int - starting index
            arr - list - output list
        '''</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">path</span><span class="p">[</span><span class="n">ind</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">ind</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
                    <span class="n">extract</span><span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">path</span><span class="p">,</span> <span class="n">ind</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">arr</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
            <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">obj</span><span class="p">:</span>
                    <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
                        <span class="n">extract</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">ind</span><span class="p">,</span> <span class="n">arr</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">ind</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">obj</span><span class="p">:</span>
                    <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
                        <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">))</span>
            <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">arr</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">extract</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[])</span>
    <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="n">outer_arr</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
            <span class="n">outer_arr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">extract</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">return</span> <span class="n">outer_arr</span></code></pre></figure>

<h2 id="update">Update</h2>
<p>This post is featured in Issue #374 of <a href="https://pycoders.com/issues/374">PyCoderâ€™s Weekly</a>.</p>
:ET